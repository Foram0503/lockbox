{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\n\n// API key for authentication\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  withCredentials: true // Enable sending cookies in cross-origin requests\n});\n\n// Helper function to format data for PHP backend\nconst formatData = data => {\n  return `json=${JSON.stringify({\n    ...data,\n    api_key: API_KEY\n  })}`;\n};\n\n// Authentication services\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        password,\n        validate: true\n      }));\n      if (response.data.code === 1) {\n        // Store user data in localStorage\n        const userData = {\n          email: response.data.data.email,\n          name: response.data.data.name,\n          id: response.data.data.id,\n          sessionId: response.data.data.session_id\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register new user\n  register: async (name, email, mobile, password) => {\n    try {\n      const response = await api.post('', formatData({\n        name,\n        email,\n        mobile,\n        password,\n        add_user: true\n      }));\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  // Request password reset\n  forgotPassword: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        send_mail_otp: true\n      }));\n      return response.data;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      throw error;\n    }\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('user');\n  }\n};\n\n// Password management services\nexport const passwordService = {\n  // Add a new password\n  addPassword: async (userId, password, platform, email) => {\n    try {\n      const userData = JSON.parse(localStorage.getItem('user'));\n      if (!userData || !userData.userId) {\n        throw new Error('User ID not found. Please login again.');\n      }\n      const response = await fetch(`${API_URL}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          api_key: API_KEY,\n          add_password: true,\n          user_id: userData.userId,\n          password: password,\n          platform: platform,\n          email: email\n        })\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error adding password:', error);\n      throw error;\n    }\n  },\n  // Get all passwords for a user\n  getPasswords: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        get_pass: true\n      }));\n      if (response.data.code === '130') {\n        return response.data;\n      } else if (response.data.code === '132' || response.data.code === '133') {\n        // Session expired or unauthorized\n        authService.logout();\n        throw new Error('Session expired. Please login again.');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Get passwords error:', error);\n      throw error;\n    }\n  },\n  // Update password\n  updatePassword: async passwordData => {\n    try {\n      const response = await api.post('', formatData({\n        id: passwordData.id,\n        name: passwordData.platform,\n        password: passwordData.password,\n        update_password: true\n      }));\n      if (response.data.code === '150') {\n        return response.data;\n      } else if (response.data.code === '132' || response.data.code === '133') {\n        // Session expired or unauthorized\n        authService.logout();\n        throw new Error('Session expired. Please login again.');\n      }\n      throw new Error(response.data.message || 'Failed to update password');\n    } catch (error) {\n      console.error('Update password error:', error);\n      throw error;\n    }\n  },\n  // Export passwords\n  exportPasswords: async email => {\n    try {\n      const form = document.createElement('form');\n      form.method = 'POST';\n      form.action = API_URL;\n      form.target = '_blank';\n      const jsonInput = document.createElement('input');\n      jsonInput.type = 'hidden';\n      jsonInput.name = 'json';\n      jsonInput.value = JSON.stringify({\n        api_key: API_KEY,\n        export_passwords: true,\n        email: email,\n        format: 'excel'\n      });\n      form.appendChild(jsonInput);\n      document.body.appendChild(form);\n      form.submit();\n      document.body.removeChild(form);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Export passwords error:', error);\n      throw error;\n    }\n  },\n  // Import passwords\n  importPasswords: async (email, csvFile) => {\n    try {\n      const reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        reader.onload = async event => {\n          try {\n            const csvData = event.target.result;\n            const response = await api.post('', formatData({\n              import_passwords: true,\n              email: email,\n              csv_data: csvData\n            }));\n            if (response.data.code === '172') {\n              resolve(response.data);\n            } else if (response.data.code === '132' || response.data.code === '133') {\n              // Session expired or unauthorized\n              authService.logout();\n              reject(new Error('Session expired. Please login again.'));\n            } else {\n              reject(new Error(response.data.message || 'Failed to import passwords'));\n            }\n          } catch (error) {\n            reject(error);\n          }\n        };\n        reader.onerror = () => {\n          reject(new Error('Failed to read CSV file'));\n        };\n        reader.readAsText(csvFile);\n      });\n    } catch (error) {\n      console.error('Import passwords error:', error);\n      throw error;\n    }\n  },\n  // Delete password\n  deletePassword: async passwordId => {\n    try {\n      const response = await api.post('', formatData({\n        delete_password: true,\n        id: passwordId\n      }));\n      if (response.data.code === '160') {\n        return response.data;\n      } else if (response.data.code === '132' || response.data.code === '133') {\n        // Session expired or unauthorized\n        authService.logout();\n        throw new Error('Session expired. Please login again.');\n      }\n      throw new Error(response.data.message || 'Failed to delete password');\n    } catch (error) {\n      console.error('Delete password error:', error);\n      throw error;\n    }\n  },\n  // Generate password\n  generatePassword: async () => {\n    try {\n      const response = await api.post('', formatData({\n        generate_password: true\n      }));\n      if (response.data.code === '180') {\n        return response.data;\n      }\n      throw new Error('Failed to generate password');\n    } catch (error) {\n      console.error('Generate password error:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","API_KEY","REACT_APP_API_KEY","api","create","baseURL","headers","withCredentials","formatData","data","JSON","stringify","api_key","authService","login","email","password","response","post","validate","code","userData","name","id","sessionId","session_id","localStorage","setItem","error","console","register","mobile","add_user","forgotPassword","send_mail_otp","logout","removeItem","passwordService","addPassword","userId","platform","parse","getItem","Error","fetch","method","body","add_password","user_id","json","getPasswords","get_pass","updatePassword","passwordData","update_password","message","exportPasswords","form","document","createElement","action","target","jsonInput","type","value","export_passwords","format","appendChild","submit","removeChild","success","importPasswords","csvFile","reader","FileReader","Promise","resolve","reject","onload","event","csvData","result","import_passwords","csv_data","onerror","readAsText","deletePassword","passwordId","delete_password","generatePassword","generate_password"],"sources":["C:/xampp/htdocs/php_project/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\r\n\r\n// API key for authentication\r\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n  },\r\n  withCredentials: true, // Enable sending cookies in cross-origin requests\r\n});\r\n\r\n// Helper function to format data for PHP backend\r\nconst formatData = (data) => {\r\n  return `json=${JSON.stringify({ ...data, api_key: API_KEY })}`;\r\n};\r\n\r\n// Authentication services\r\nexport const authService = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email, \r\n        password,\r\n        validate: true \r\n      }));\r\n      \r\n      if (response.data.code === 1) {\r\n        // Store user data in localStorage\r\n        const userData = {\r\n          email: response.data.data.email,\r\n          name: response.data.data.name,\r\n          id: response.data.data.id,\r\n          sessionId: response.data.data.session_id\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register new user\r\n  register: async (name, email, mobile, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        name, \r\n        email, \r\n        mobile, \r\n        password,\r\n        add_user: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Request password reset\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        send_mail_otp: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\n// Password management services\r\nexport const passwordService = {\r\n  // Add a new password\r\n  addPassword: async (userId, password, platform, email) => {\r\n    try {\r\n      const userData = JSON.parse(localStorage.getItem('user'));\r\n      if (!userData || !userData.userId) {\r\n        throw new Error('User ID not found. Please login again.');\r\n      }\r\n\r\n      const response = await fetch(`${API_URL}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          api_key: API_KEY,\r\n          add_password: true,\r\n          user_id: userData.userId,\r\n          password: password,\r\n          platform: platform,\r\n          email: email\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error adding password:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all passwords for a user\r\n  getPasswords: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        get_pass: true \r\n      }));\r\n      \r\n      if (response.data.code === '130') {\r\n        return response.data;\r\n      } else if (response.data.code === '132' || response.data.code === '133') {\r\n        // Session expired or unauthorized\r\n        authService.logout();\r\n        throw new Error('Session expired. Please login again.');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update password\r\n  updatePassword: async (passwordData) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        id: passwordData.id,\r\n        name: passwordData.platform,\r\n        password: passwordData.password,\r\n        update_password: true\r\n      }));\r\n      \r\n      if (response.data.code === '150') {\r\n        return response.data;\r\n      } else if (response.data.code === '132' || response.data.code === '133') {\r\n        // Session expired or unauthorized\r\n        authService.logout();\r\n        throw new Error('Session expired. Please login again.');\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Failed to update password');\r\n    } catch (error) {\r\n      console.error('Update password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Export passwords\r\n  exportPasswords: async (email) => {\r\n    try {\r\n      const form = document.createElement('form');\r\n      form.method = 'POST';\r\n      form.action = API_URL;\r\n      form.target = '_blank';\r\n      \r\n      const jsonInput = document.createElement('input');\r\n      jsonInput.type = 'hidden';\r\n      jsonInput.name = 'json';\r\n      jsonInput.value = JSON.stringify({\r\n        api_key: API_KEY,\r\n        export_passwords: true,\r\n        email: email,\r\n        format: 'excel'\r\n      });\r\n      form.appendChild(jsonInput);\r\n      \r\n      document.body.appendChild(form);\r\n      form.submit();\r\n      document.body.removeChild(form);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Export passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Import passwords\r\n  importPasswords: async (email, csvFile) => {\r\n    try {\r\n      const reader = new FileReader();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        reader.onload = async (event) => {\r\n          try {\r\n            const csvData = event.target.result;\r\n            \r\n            const response = await api.post('', formatData({\r\n              import_passwords: true,\r\n              email: email,\r\n              csv_data: csvData\r\n            }));\r\n            \r\n            if (response.data.code === '172') {\r\n              resolve(response.data);\r\n            } else if (response.data.code === '132' || response.data.code === '133') {\r\n              // Session expired or unauthorized\r\n              authService.logout();\r\n              reject(new Error('Session expired. Please login again.'));\r\n            } else {\r\n              reject(new Error(response.data.message || 'Failed to import passwords'));\r\n            }\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          reject(new Error('Failed to read CSV file'));\r\n        };\r\n        \r\n        reader.readAsText(csvFile);\r\n      });\r\n    } catch (error) {\r\n      console.error('Import passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete password\r\n  deletePassword: async (passwordId) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        delete_password: true,\r\n        id: passwordId\r\n      }));\r\n      \r\n      if (response.data.code === '160') {\r\n        return response.data;\r\n      } else if (response.data.code === '132' || response.data.code === '133') {\r\n        // Session expired or unauthorized\r\n        authService.logout();\r\n        throw new Error('Session expired. Please login again.');\r\n      }\r\n      \r\n      throw new Error(response.data.message || 'Failed to delete password');\r\n    } catch (error) {\r\n      console.error('Delete password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generate password\r\n  generatePassword: async () => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        generate_password: true\r\n      }));\r\n      \r\n      if (response.data.code === '180') {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error('Failed to generate password');\r\n    } catch (error) {\r\n      console.error('Generate password error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}