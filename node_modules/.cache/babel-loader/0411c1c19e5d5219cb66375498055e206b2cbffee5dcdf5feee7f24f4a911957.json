{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\n\n// API key for authentication\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Important for cookies\n});\n\n// Helper function to format data for PHP backend\nconst formatData = data => {\n  return {\n    ...data,\n    api_key: API_KEY\n  };\n};\n\n// Authentication services\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        password,\n        validate: true\n      }));\n      if (response.data.code === 1) {\n        // Store user data in localStorage\n        const userData = {\n          email: response.data.data.email,\n          name: response.data.data.name,\n          id: response.data.data.id\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register new user\n  register: async (name, email, mobile, password) => {\n    try {\n      const response = await api.post('', formatData({\n        add_user: true,\n        name,\n        email,\n        mobile,\n        password\n      }));\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  // Request password reset\n  forgotPassword: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        send_mail_otp: true\n      }));\n      return response.data;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      throw error;\n    }\n  },\n  // Check session status\n  checkSession: async () => {\n    try {\n      const response = await api.post('', formatData({\n        check_session: true\n      }));\n      if (response.data.code === 200) {\n        // Update user data in localStorage\n        const userData = {\n          email: response.data.data.email,\n          name: response.data.data.name,\n          id: response.data.data.user_id\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          valid: true,\n          user: userData\n        };\n      } else {\n        // Clear user data from localStorage\n        localStorage.removeItem('user');\n        return {\n          valid: false\n        };\n      }\n    } catch (error) {\n      console.error('Session check error:', error);\n      localStorage.removeItem('user');\n      return {\n        valid: false\n      };\n    }\n  },\n  // Logout user\n  logout: async () => {\n    try {\n      await api.post('', formatData({\n        logout: true\n      }));\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still remove user data from localStorage even if API call fails\n      localStorage.removeItem('user');\n      throw error;\n    }\n  }\n};\n\n// Password management services\nexport const passwordService = {\n  // Add a new password\n  addPassword: async passwordData => {\n    try {\n      // Validate required fields\n      if (!passwordData.user_id || !passwordData.pass || !passwordData.name || !passwordData.email) {\n        throw new Error('Missing required fields');\n      }\n      const response = await api.post('', formatData({\n        add_pass: true,\n        user_id: passwordData.user_id,\n        pass: passwordData.pass,\n        name: passwordData.name,\n        email: passwordData.email,\n        notes: passwordData.notes || '',\n        tags: passwordData.tags || ''\n      }));\n\n      // Check for session expiration\n      if (response.data.code === 401) {\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        return {\n          error: 'Session expired. Please login again.'\n        };\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error adding password:', error);\n      throw error;\n    }\n  },\n  // Get all passwords for a user\n  getPasswords: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        get_pass: true\n      }));\n\n      // Check for session expiration\n      if (response.data.code === 401) {\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        return {\n          error: 'Session expired. Please login again.'\n        };\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Get passwords error:', error);\n      throw error;\n    }\n  },\n  // Update password\n  updatePassword: async passwordData => {\n    try {\n      const response = await api.post('', formatData({\n        id: passwordData.id,\n        name: passwordData.platform,\n        password: passwordData.password,\n        update_password: true\n      }));\n\n      // Check for session expiration\n      if (response.data.code === 401) {\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        return {\n          error: 'Session expired. Please login again.'\n        };\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Update password error:', error);\n      throw error;\n    }\n  },\n  // Export passwords\n  exportPasswords: async email => {\n    try {\n      const form = document.createElement('form');\n      form.method = 'POST';\n      form.action = API_URL;\n      form.target = '_blank';\n      const jsonInput = document.createElement('input');\n      jsonInput.type = 'hidden';\n      jsonInput.name = 'json';\n      jsonInput.value = JSON.stringify({\n        api_key: API_KEY,\n        export_passwords: true,\n        email: email,\n        format: 'excel'\n      });\n      form.appendChild(jsonInput);\n      document.body.appendChild(form);\n      form.submit();\n      document.body.removeChild(form);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Export passwords error:', error);\n      throw error;\n    }\n  },\n  // Import passwords\n  importPasswords: async (email, csvFile) => {\n    try {\n      const reader = new FileReader();\n      return new Promise((resolve, reject) => {\n        reader.onload = async event => {\n          try {\n            const csvData = event.target.result;\n            const response = await api.post('', formatData({\n              import_passwords: true,\n              email: email,\n              csv_data: csvData\n            }));\n\n            // Check for session expiration\n            if (response.data.code === 401) {\n              localStorage.removeItem('user');\n              window.location.href = '/login';\n              resolve({\n                error: 'Session expired. Please login again.'\n              });\n              return;\n            }\n            resolve(response.data);\n          } catch (error) {\n            reject(error);\n          }\n        };\n        reader.onerror = () => {\n          reject(new Error('Failed to read CSV file'));\n        };\n        reader.readAsText(csvFile);\n      });\n    } catch (error) {\n      console.error('Import passwords error:', error);\n      throw error;\n    }\n  },\n  // Delete password\n  deletePassword: async passwordId => {\n    try {\n      const response = await api.post('', formatData({\n        delete_password: true,\n        id: passwordId\n      }));\n\n      // Check for session expiration\n      if (response.data.code === 401) {\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        return {\n          error: 'Session expired. Please login again.'\n        };\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Delete password error:', error);\n      throw error;\n    }\n  },\n  // Generate password\n  generatePassword: async () => {\n    try {\n      const response = await api.post('', formatData({\n        generate_password: true\n      }));\n\n      // Check for session expiration\n      if (response.data.code === 401) {\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n        return {\n          error: 'Session expired. Please login again.'\n        };\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Generate password error:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","API_KEY","REACT_APP_API_KEY","api","create","baseURL","headers","withCredentials","formatData","data","api_key","authService","login","email","password","response","post","validate","code","userData","name","id","localStorage","setItem","JSON","stringify","error","console","register","mobile","add_user","forgotPassword","send_mail_otp","checkSession","check_session","user_id","valid","user","removeItem","logout","success","passwordService","addPassword","passwordData","pass","Error","add_pass","notes","tags","window","location","href","getPasswords","get_pass","updatePassword","platform","update_password","exportPasswords","form","document","createElement","method","action","target","jsonInput","type","value","export_passwords","format","appendChild","body","submit","removeChild","importPasswords","csvFile","reader","FileReader","Promise","resolve","reject","onload","event","csvData","result","import_passwords","csv_data","onerror","readAsText","deletePassword","passwordId","delete_password","generatePassword","generate_password"],"sources":["C:/xampp/htdocs/php_project/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\r\n\r\n// API key for authentication\r\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true // Important for cookies\r\n});\r\n\r\n// Helper function to format data for PHP backend\r\nconst formatData = (data) => {\r\n  return { ...data, api_key: API_KEY };\r\n};\r\n\r\n// Authentication services\r\nexport const authService = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email, \r\n        password,\r\n        validate: true \r\n      }));\r\n      \r\n      if (response.data.code === 1) {\r\n        // Store user data in localStorage\r\n        const userData = {\r\n          email: response.data.data.email,\r\n          name: response.data.data.name,\r\n          id: response.data.data.id\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register new user\r\n  register: async (name, email, mobile, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        add_user: true,\r\n        name,\r\n        email,\r\n        mobile,\r\n        password\r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Request password reset\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        send_mail_otp: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Check session status\r\n  checkSession: async () => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        check_session: true \r\n      }));\r\n      \r\n      if (response.data.code === 200) {\r\n        // Update user data in localStorage\r\n        const userData = {\r\n          email: response.data.data.email,\r\n          name: response.data.data.name,\r\n          id: response.data.data.user_id\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { valid: true, user: userData };\r\n      } else {\r\n        // Clear user data from localStorage\r\n        localStorage.removeItem('user');\r\n        return { valid: false };\r\n      }\r\n    } catch (error) {\r\n      console.error('Session check error:', error);\r\n      localStorage.removeItem('user');\r\n      return { valid: false };\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: async () => {\r\n    try {\r\n      await api.post('', formatData({ \r\n        logout: true \r\n      }));\r\n      localStorage.removeItem('user');\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Still remove user data from localStorage even if API call fails\r\n      localStorage.removeItem('user');\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Password management services\r\nexport const passwordService = {\r\n  // Add a new password\r\n  addPassword: async (passwordData) => {\r\n    try {\r\n      // Validate required fields\r\n      if (!passwordData.user_id || !passwordData.pass || !passwordData.name || !passwordData.email) {\r\n        throw new Error('Missing required fields');\r\n      }\r\n\r\n      const response = await api.post('', formatData({\r\n        add_pass: true,\r\n        user_id: passwordData.user_id,\r\n        pass: passwordData.pass,\r\n        name: passwordData.name,\r\n        email: passwordData.email,\r\n        notes: passwordData.notes || '',\r\n        tags: passwordData.tags || ''\r\n      }));\r\n      \r\n      // Check for session expiration\r\n      if (response.data.code === 401) {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return { error: 'Session expired. Please login again.' };\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding password:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all passwords for a user\r\n  getPasswords: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        get_pass: true \r\n      }));\r\n      \r\n      // Check for session expiration\r\n      if (response.data.code === 401) {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return { error: 'Session expired. Please login again.' };\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update password\r\n  updatePassword: async (passwordData) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        id: passwordData.id,\r\n        name: passwordData.platform,\r\n        password: passwordData.password,\r\n        update_password: true\r\n      }));\r\n      \r\n      // Check for session expiration\r\n      if (response.data.code === 401) {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return { error: 'Session expired. Please login again.' };\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Export passwords\r\n  exportPasswords: async (email) => {\r\n    try {\r\n      const form = document.createElement('form');\r\n      form.method = 'POST';\r\n      form.action = API_URL;\r\n      form.target = '_blank';\r\n      \r\n      const jsonInput = document.createElement('input');\r\n      jsonInput.type = 'hidden';\r\n      jsonInput.name = 'json';\r\n      jsonInput.value = JSON.stringify({\r\n        api_key: API_KEY,\r\n        export_passwords: true,\r\n        email: email,\r\n        format: 'excel'\r\n      });\r\n      form.appendChild(jsonInput);\r\n      \r\n      document.body.appendChild(form);\r\n      form.submit();\r\n      document.body.removeChild(form);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Export passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Import passwords\r\n  importPasswords: async (email, csvFile) => {\r\n    try {\r\n      const reader = new FileReader();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        reader.onload = async (event) => {\r\n          try {\r\n            const csvData = event.target.result;\r\n            \r\n            const response = await api.post('', formatData({\r\n              import_passwords: true,\r\n              email: email,\r\n              csv_data: csvData\r\n            }));\r\n            \r\n            // Check for session expiration\r\n            if (response.data.code === 401) {\r\n              localStorage.removeItem('user');\r\n              window.location.href = '/login';\r\n              resolve({ error: 'Session expired. Please login again.' });\r\n              return;\r\n            }\r\n            \r\n            resolve(response.data);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        };\r\n        \r\n        reader.onerror = () => {\r\n          reject(new Error('Failed to read CSV file'));\r\n        };\r\n        \r\n        reader.readAsText(csvFile);\r\n      });\r\n    } catch (error) {\r\n      console.error('Import passwords error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete password\r\n  deletePassword: async (passwordId) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        delete_password: true,\r\n        id: passwordId\r\n      }));\r\n      \r\n      // Check for session expiration\r\n      if (response.data.code === 401) {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return { error: 'Session expired. Please login again.' };\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Delete password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generate password\r\n  generatePassword: async () => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        generate_password: true\r\n      }));\r\n      \r\n      // Check for session expiration\r\n      if (response.data.code === 401) {\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n        return { error: 'Session expired. Please login again.' };\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Generate password error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}