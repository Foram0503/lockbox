{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\n\n// API key for authentication\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  withCredentials: true // Enable sending cookies in cross-origin requests\n});\n\n// Helper function to format data for PHP backend\nconst formatData = data => {\n  return `json=${JSON.stringify({\n    ...data,\n    api_key: API_KEY\n  })}`;\n};\n\n// Authentication services\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        password,\n        validate: true\n      }));\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Register new user\n  register: async (name, email, mobile, password) => {\n    try {\n      const response = await api.post('', formatData({\n        name,\n        email,\n        mobile,\n        password,\n        add_user: true\n      }));\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Request password reset\n  forgotPassword: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        send_mail_otp: true\n      }));\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Password management services\nexport const passwordService = {\n  // Add a new password\n  addPassword: async (userId, password, name, email) => {\n    try {\n      const response = await api.post('', formatData({\n        user_id: userId,\n        pass: password,\n        name,\n        email,\n        add_pass: true\n      }));\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get all passwords for a user\n  getPasswords: async email => {\n    try {\n      const response = await api.post('', formatData({\n        email,\n        get_pass: true\n      }));\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updatePassword: async passwordData => {\n    try {\n      const response = await api.post('', formatData({\n        id: passwordData.id,\n        name: passwordData.platform,\n        password: passwordData.password,\n        update_password: true\n      }));\n      if (response.data.code === '150') {\n        return response.data;\n      } else {\n        throw new Error(response.data.message || 'Failed to update password');\n      }\n    } catch (error) {\n      console.error('Error updating password:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","API_KEY","REACT_APP_API_KEY","api","create","baseURL","headers","withCredentials","formatData","data","JSON","stringify","api_key","authService","login","email","password","response","post","validate","error","register","name","mobile","add_user","forgotPassword","send_mail_otp","passwordService","addPassword","userId","user_id","pass","add_pass","getPasswords","get_pass","updatePassword","passwordData","id","platform","update_password","code","Error","message","console"],"sources":["C:/xampp/htdocs/php_project/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost/php_project/Lock Box/LockBox.php';\r\n\r\n// API key for authentication\r\nconst API_KEY = process.env.REACT_APP_API_KEY || 'lock123';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n  },\r\n  withCredentials: true, // Enable sending cookies in cross-origin requests\r\n});\r\n\r\n// Helper function to format data for PHP backend\r\nconst formatData = (data) => {\r\n  return `json=${JSON.stringify({ ...data, api_key: API_KEY })}`;\r\n};\r\n\r\n// Authentication services\r\nexport const authService = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email, \r\n        password,\r\n        validate: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register new user\r\n  register: async (name, email, mobile, password) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        name, \r\n        email, \r\n        mobile, \r\n        password,\r\n        add_user: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Request password reset\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        send_mail_otp: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// Password management services\r\nexport const passwordService = {\r\n  // Add a new password\r\n  addPassword: async (userId, password, name, email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        user_id: userId,\r\n        pass: password,\r\n        name,\r\n        email,\r\n        add_pass: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all passwords for a user\r\n  getPasswords: async (email) => {\r\n    try {\r\n      const response = await api.post('', formatData({ \r\n        email,\r\n        get_pass: true \r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updatePassword: async (passwordData) => {\r\n    try {\r\n      const response = await api.post('', formatData({\r\n        id: passwordData.id,\r\n        name: passwordData.platform,\r\n        password: passwordData.password,\r\n        update_password: true\r\n      }));\r\n      \r\n      if (response.data.code === '150') {\r\n        return response.data;\r\n      } else {\r\n        throw new Error(response.data.message || 'Failed to update password');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating password:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}